generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  username     String   @unique
  password     String
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt
  bikes_count  Float?   @default(0) @db.Real
  posts_count  Float?   @default(0) @db.Real
  routes_count Float?   @default(0) @db.Real
  avatar_url   String?
  bikes        Bike[]
  posts        Post[]
  likes        Like[]
  comments     Comment[]
}

model Bike {
  id         Int         @id @default(autoincrement())
  userId     String
  brand      String
  model      String
  createdAt  DateTime    @default(now())
  updateAt   DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id])
  components Component[] 
}

model Component {
  id               Int      @id @default(autoincrement())
  bikeId           Int
  name             String
  maintenanceDate  DateTime
  currentState     String
  currentMileageKm Float
  maintenanceCost  Float
  createdAt        DateTime @default(now())
  updateAt         DateTime @updatedAt
  bike             Bike     @relation(fields: [bikeId], references: [id], onDelete: Cascade)
}

model Post {
  id          Int      @id @default(autoincrement())
  userId      String
  imageUrl    String
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  likes       Like[]
  comments    Comment[]
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}


model Comment {
  id          Int      @id @default(autoincrement())
  userId      String
  postId      Int
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
}